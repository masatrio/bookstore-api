// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/usecase/book_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/masatrio/bookstore-api/internal/domain/usecase"
	utils "github.com/masatrio/bookstore-api/utils"
)

// MockBookUseCase is a mock of BookUseCase interface.
type MockBookUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUseCaseMockRecorder
}

// MockBookUseCaseMockRecorder is the mock recorder for MockBookUseCase.
type MockBookUseCaseMockRecorder struct {
	mock *MockBookUseCase
}

// NewMockBookUseCase creates a new mock instance.
func NewMockBookUseCase(ctrl *gomock.Controller) *MockBookUseCase {
	mock := &MockBookUseCase{ctrl: ctrl}
	mock.recorder = &MockBookUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookUseCase) EXPECT() *MockBookUseCaseMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookUseCase) CreateBook(ctx context.Context, input usecase.Book) (*usecase.Book, utils.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, input)
	ret0, _ := ret[0].(*usecase.Book)
	ret1, _ := ret[1].(utils.CustomError)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookUseCaseMockRecorder) CreateBook(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookUseCase)(nil).CreateBook), ctx, input)
}

// GetBook mocks base method.
func (m *MockBookUseCase) GetBook(ctx context.Context, id int64) (*usecase.Book, utils.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, id)
	ret0, _ := ret[0].(*usecase.Book)
	ret1, _ := ret[1].(utils.CustomError)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookUseCaseMockRecorder) GetBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookUseCase)(nil).GetBook), ctx, id)
}

// ListBooks mocks base method.
func (m *MockBookUseCase) ListBooks(ctx context.Context, input usecase.ListBooksInput) (*usecase.ListBooksOutput, utils.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", ctx, input)
	ret0, _ := ret[0].(*usecase.ListBooksOutput)
	ret1, _ := ret[1].(utils.CustomError)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookUseCaseMockRecorder) ListBooks(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookUseCase)(nil).ListBooks), ctx, input)
}
