// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/usecase/order_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/masatrio/bookstore-api/internal/domain/usecase"
	utils "github.com/masatrio/bookstore-api/utils"
)

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderUseCase) CreateOrder(ctx context.Context, input usecase.CreateOrderInput, userID int64) (*usecase.CreateOrderOutput, utils.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, input, userID)
	ret0, _ := ret[0].(*usecase.CreateOrderOutput)
	ret1, _ := ret[1].(utils.CustomError)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderUseCaseMockRecorder) CreateOrder(ctx, input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderUseCase)(nil).CreateOrder), ctx, input, userID)
}

// GetOrders mocks base method.
func (m *MockOrderUseCase) GetOrders(ctx context.Context, userID int64, limit, offset int) ([]usecase.GetOrderOutput, utils.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]usecase.GetOrderOutput)
	ret1, _ := ret[1].(utils.CustomError)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderUseCaseMockRecorder) GetOrders(ctx, userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderUseCase)(nil).GetOrders), ctx, userID, limit, offset)
}
